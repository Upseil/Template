// Game Parent

ext {
    workingTitle = "WorkingTitle"
	
	gradleTarget = '4.6'
	gwtGradleTarget = '1.0.6'
	javaTarget = '1.8'
    gwtTarget = '2.8.1'
	
    gdxTarget = '1.9.8'
    artemisTarget = '2.1.0'
	
    jacksonTarget = '2.8.8'
    jacksonGwtTarget = '0.14.2'
	
    upseilGdxTarget = '0.1.0-SNAPSHOT'
	upseilGdxPath = '../UpseilGDX'
	
    junitTarget = '4.12'
    hamcrestTarget = '2.0.0.0'
}

apply from: "$upseilGdxPath/upseilgdx-setup.gradle"

allprojects {
    apply plugin: "jacoco"
    
    group = 'com.upseil.working-title'
    version = '0.1.0'
}

task testCoverage(type: JacocoReport, group:'verification') {
	description 'Runs the unit tests and creates the coverage report.'
	dependsOn subprojects*.test

    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    // Add all relevant sourcesets from the subprojects 
    subprojects.each {
       sourceSets it.sourceSets.main
    }

    reports {
		xml.enabled true
		html.enabled true
		html.destination "${buildDir}/reports/jacoco"
		csv.enabled false
    }
}

// UpseilGDX Tooling

/** pixelateFonts Configuration
 *   Filters every pixel in the fonts .png file:
 *     if pixel.rgb == filter.rgb && pixel.alpha >= alphaThreshold {
 *       pixel.rgba = filter.rgba
 *     } else {
 *       pixel.rgba = transparent.rgba
 *     }
 *
 *   Pattern for the path to the font folder containing the .fnt and .png:
 *     fontPath = <rawFontRoot>/<fontFamilyName>/fnt-<fontSize>/
 *     fntPath = <fontPath>/<fontFamilyName>-<fontSize>.fnt
 *     pngPath = <fontPath>/<fontFamilyName>-<fontSize>.png
 */
ext {
    rawFontRoot = '../assets/common/font'
    fontsToPixelate = [
//       fontFamilyName
        ['vis-open-sans', [
//              fontSize as Integer   filterColor as Hex-String   alphaThreshold as Integer
                       ['18',                 '#FFFFFF',                   0.3 * 255]
            ]
        ]
    ]
}

/** packSkins/deploySkins Configuration
 *   Packs the fonts and components of the defined skins and deploys them
 *   to the <deploySkinRoot> directory (should be located in the game assets).
 *
 *   Packed skins are saved in a subdirectory <skinName> located in the
 *   <packedSkinRoot> directory.
 *
 *   Requires the rawFontRoot variable from the pixelateFonts configuration.
 *
 *   Path patterns for used
 *     fonts:           <rawFoontRoot>\<fontName>\fnt-*\[*.fnt,*.png]
 *     image resources: <rawSkinRoot>\<skinBase>\**\[*.png,*.jpg,*.jpeg]
 *                      <additionalResources>\**\[*.png,*.jpg,*.jpeg]
 *
 *   Supports the configuration of the texture packer via a pack.json located
 *   in <rawSkinRoot>\<skinBase>\ or <additionalResources>\ (not in a subdirectory).
 *   The pack.json in the additional resources overwrites the pack.json of the
 *   skin base.
 *
 *   Any files inside the <additionalResources> directory that aren't image
 *   resources will be copied into the directory of the packed skin (which means
 *   that these files will be also deployed). This could be used for the json that
 *   defines the skin licenses/attributions of assets.
 */
ext {
    rawSkinRoot = '../assets/common/skin'
    packedSkinRoot = '../assets/skin/packed'
    deploySkinRoot = './core/assets/skin'
    skins = [
//        skinName        fontName       skinBase     additionalResources (optional)
        ['tixel-vis', 'vis-open-sans', 'tixel_BASE', '../assets/skin/raw/tixel-vis']
    ]
}